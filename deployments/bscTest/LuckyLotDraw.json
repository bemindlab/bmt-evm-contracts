{
  "address": "0xD1A04A4E34118c69f8D5D8e1Cc5E9FF5ae52F61A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_paymentAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "number",
          "type": "uint32"
        }
      ],
      "name": "NewEntry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RefundIssued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "winningNumber",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "RoundClosed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRoundId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "number",
          "type": "uint32"
        }
      ],
      "name": "enter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "entries",
      "outputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "number",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getEntry",
      "outputs": [
        {
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "number",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getParticipants",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoundNumberByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getRoundNumbers",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumbersPerRound",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "refundAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isClosed",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "winningNumber",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "hasWinner",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_maxNumber",
          "type": "uint32"
        }
      ],
      "name": "setMaxNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_maxNumbersPerRound",
          "type": "uint8"
        }
      ],
      "name": "setMaxNumbersPerRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_paymentAddress",
          "type": "address"
        }
      ],
      "name": "setPaymentAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        }
      ],
      "name": "setTicketPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "winningNumber",
          "type": "uint32"
        }
      ],
      "name": "setWinningNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "updateAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3be98e459e946666184f86952bb53e206ca43289e82062f30f0732f8102c2276",
  "receipt": {
    "to": null,
    "from": "0x2aBf33658053eF646aeA29F067783Ab1a9Cf5025",
    "contractAddress": "0xD1A04A4E34118c69f8D5D8e1Cc5E9FF5ae52F61A",
    "transactionIndex": 2,
    "gasUsed": "2692265",
    "logsBloom": "0x
    "blockHash": "0x58eca6688cdaf1e36c3787f96762f6bf4cac7e047d47fca23d8bac72a68d7129",
    "transactionHash": "0x3be98e459e946666184f86952bb53e206ca43289e82062f30f0732f8102c2276",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 45708402,
        "transactionHash": "0x3be98e459e946666184f86952bb53e206ca43289e82062f30f0732f8102c2276",
        "address": "0xD1A04A4E34118c69f8D5D8e1Cc5E9FF5ae52F61A",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002abf33658053ef646aea29f067783ab1a9cf5025",
          "0x0000000000000000000000002abf33658053ef646aea29f067783ab1a9cf5025"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x58eca6688cdaf1e36c3787f96762f6bf4cac7e047d47fca23d8bac72a68d7129"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 45708402,
        "transactionHash": "0x3be98e459e946666184f86952bb53e206ca43289e82062f30f0732f8102c2276",
        "address": "0xD1A04A4E34118c69f8D5D8e1Cc5E9FF5ae52F61A",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000002abf33658053ef646aea29f067783ab1a9cf5025",
          "0x0000000000000000000000002abf33658053ef646aea29f067783ab1a9cf5025"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x58eca6688cdaf1e36c3787f96762f6bf4cac7e047d47fca23d8bac72a68d7129"
      }
    ],
    "blockNumber": 45708402,
    "cumulativeGasUsed": "2815867",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc92317E37Fd88CD2fCf14Efa4E715E93e10e2CF5",
    "0x2aBf33658053eF646aeA29F067783Ab1a9Cf5025",
    "1000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "24729436439fc5ac78d312ffc1d467aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_paymentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"}],\"name\":\"NewEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"winningNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"RoundClosed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entries\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getEntry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"number\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoundNumberByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundNumbers\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumbersPerRound\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"refundAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"winningNumber\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"hasWinner\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maxNumber\",\"type\":\"uint32\"}],\"name\":\"setMaxNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxNumbersPerRound\",\"type\":\"uint8\"}],\"name\":\"setMaxNumbersPerRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_paymentAddress\",\"type\":\"address\"}],\"name\":\"setPaymentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"winningNumber\",\"type\":\"uint32\"}],\"name\":\"setWinningNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used to create a lottery systemA contract for a lottery systemdefault numbers are 0-99 and max numbers per round are 100\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"LuckyLotDraw\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is used to create a lottery system\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LuckyLotDraw.sol\":\"LuckyLotDraw\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/LuckyLotDraw.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title LuckyLotDraw\\n * @notice This contract is used to create a lottery system\\n * @dev This contract is used to create a lottery system\\n * @dev A contract for a lottery system\\n * @dev default numbers are 0-99 and max numbers per round are 100\\n */\\ncontract LuckyLotDraw is AccessControl, ReentrancyGuard {\\n    using Address for address payable;\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    uint256 public ticketPrice;\\n    address public paymentToken;\\n    address payable public paymentAddress;\\n\\n    uint32 public maxNumber = 99;\\n    uint32 public maxNumbersPerRound = 100;\\n\\n    struct Round {\\n        uint256 id;\\n        mapping(uint256 => address) participants;\\n        uint32[] numbers;\\n        bool isClosed;\\n        uint32 winningNumber;\\n        bool hasWinner;\\n    }\\n    uint256 public currentRoundId;\\n\\n    struct Entry {\\n        address participant;\\n        uint32 number;\\n    }\\n    Entry[] public entries;\\n\\n    // Mapping to store rounds\\n    mapping(uint256 => Round) public rounds;\\n\\n    // Mapping to store participant addresses for each round\\n    mapping(uint256 => address[]) private roundParticipants;\\n\\n    event NewEntry(uint256 indexed round, address indexed user, uint32 number);\\n\\n    event RoundClosed(uint256 indexed round, uint32 winningNumber, address winner);\\n\\n    event RefundIssued(uint256 indexed round, address indexed user, uint256 amount);\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Only admin can perform this action\\\");\\n        _;\\n    }\\n\\n    modifier roundOpen(uint256 roundId) {\\n        require(!rounds[roundId].isClosed, \\\"Round is closed\\\");\\n        _;\\n    }\\n\\n    constructor(address _paymentToken, address payable _paymentAddress, uint256 _ticketPrice) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(ADMIN_ROLE, msg.sender);\\n\\n        paymentToken = _paymentToken;\\n        paymentAddress = _paymentAddress;\\n        ticketPrice = _ticketPrice;\\n\\n        currentRoundId = 1;\\n    }\\n\\n    // Function to get all numbers from a specific round\\n    function getRoundNumbers(uint256 roundId) external view returns (uint32[] memory) {\\n        return rounds[roundId].numbers;\\n    }\\n\\n    // Function to get a number by index in a specific round\\n    function getRoundNumberByIndex(uint256 roundId, uint256 index) external view returns (uint256) {\\n        return rounds[roundId].numbers[index];\\n    }\\n\\n    // Function to get participant by number in a specific round\\n    function getParticipants(uint256 roundId) external view returns (address[] memory) {\\n        return roundParticipants[roundId];\\n    }\\n\\n    // This function is used to enter the lottery\\n    function enter(uint32 number) external roundOpen(currentRoundId) nonReentrant {\\n        require(number <= maxNumber, \\\"Number exceeds max limit\\\");\\n        require(rounds[currentRoundId].participants[number] == address(0), \\\"Number already taken\\\");\\n\\n        IERC20(paymentToken).transferFrom(msg.sender, paymentAddress, ticketPrice);\\n\\n        rounds[currentRoundId].participants[number] = msg.sender;\\n        rounds[currentRoundId].numbers.push(number);\\n        roundParticipants[currentRoundId].push(msg.sender);\\n        entries.push(Entry({participant: msg.sender, number: number}));\\n\\n        emit NewEntry(currentRoundId, msg.sender, number);\\n\\n        if (rounds[currentRoundId].numbers.length >= maxNumbersPerRound) {\\n            closeRound();\\n        }\\n    }\\n\\n    // This function is used to get the number of entries\\n    function getEntry(uint256 index) public view returns (address participant, uint32 number) {\\n        require(index < entries.length, \\\"Index out of bounds\\\");\\n        Entry storage entry = entries[index];\\n        return (entry.participant, entry.number);\\n    }\\n\\n    // This function is used to close the current round\\n    function closeRound() public onlyAdmin roundOpen(currentRoundId) {\\n        rounds[currentRoundId].isClosed = true;\\n    }\\n\\n    // This function is used to set the winning number\\n    function setWinningNumber(uint32 winningNumber) external onlyAdmin {\\n        require(winningNumber <= maxNumber, \\\"Invalid winning number\\\");\\n        require(rounds[currentRoundId].isClosed, \\\"Round is not closed\\\");\\n\\n        Round storage round = rounds[currentRoundId];\\n        round.winningNumber = winningNumber;\\n        round.hasWinner = round.participants[winningNumber] != address(0);\\n\\n        address winner = round.participants[winningNumber];\\n        if (round.hasWinner) {\\n            uint256 prize = ticketPrice * maxNumbersPerRound;\\n            IERC20(paymentToken).transferFrom(msg.sender, winner, prize);\\n        }\\n\\n        emit RoundClosed(currentRoundId, winningNumber, winner);\\n        currentRoundId++;\\n    }\\n\\n    // This function is used to set the ticket price\\n    function setTicketPrice(uint256 _ticketPrice) external onlyAdmin {\\n        ticketPrice = _ticketPrice;\\n    }\\n\\n    // This function is used to set the payment token\\n    function setPaymentToken(address _paymentToken) external onlyAdmin {\\n        paymentToken = _paymentToken;\\n    }\\n\\n    // This function is used to set the payment address\\n    function setPaymentAddress(address payable _paymentAddress) external onlyAdmin {\\n        paymentAddress = _paymentAddress;\\n    }\\n\\n    // This function is used to set the max number\\n    function setMaxNumber(uint32 _maxNumber) external onlyAdmin {\\n        maxNumber = _maxNumber;\\n    }\\n\\n    // This function is used to set the max numbers per round\\n    function setMaxNumbersPerRound(uint8 _maxNumbersPerRound) external onlyAdmin {\\n        maxNumbersPerRound = _maxNumbersPerRound;\\n    }\\n\\n    // This function is used to withdraw the token\\n    function withdraw(address tokenAddress) external onlyAdmin {\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\n        IERC20(tokenAddress).transfer(msg.sender, balance);\\n    }\\n\\n    // This function is used to refund all the participants\\n    function refundAll(uint256 roundId) external onlyAdmin roundOpen(roundId) nonReentrant {\\n        Round storage round = rounds[roundId];\\n        for (uint256 i = 0; i < round.numbers.length; i++) {\\n            address participant = round.participants[round.numbers[i]];\\n            uint256 refundAmount = ticketPrice;\\n            IERC20(paymentToken).transferFrom(msg.sender, participant, refundAmount);\\n            emit RefundIssued(roundId, participant, refundAmount);\\n        }\\n        round.isClosed = true;\\n    }\\n\\n    // This function is used to update the admin\\n    function updateAdmin(address newAdmin) external onlyAdmin {\\n        grantRole(ADMIN_ROLE, newAdmin);\\n        revokeRole(ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xa8ca77138740fef50209ccd69ea92255050f6539c344d3e507edd8d442dbda68\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526063600460146101000a81548163ffffffff021916908363ffffffff1602179055506064600460186101000a81548163ffffffff021916908363ffffffff16021790555034801561005457600080fd5b506040516130b73803806130b7833981810160405281019061007691906103a1565b600180819055506100906000801b3361015b60201b60201c565b506100c17fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217753361015b60201b60201c565b5082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060028190555060016005819055505050506103f4565b600061016d838361025860201b60201c565b61024d57600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506101ea6102c260201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050610252565b600090505b92915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102fa826102cf565b9050919050565b61030a816102ef565b811461031557600080fd5b50565b60008151905061032781610301565b92915050565b6000610338826102cf565b9050919050565b6103488161032d565b811461035357600080fd5b50565b6000815190506103658161033f565b92915050565b6000819050919050565b61037e8161036b565b811461038957600080fd5b50565b60008151905061039b81610375565b92915050565b6000806000606084860312156103ba576103b96102ca565b5b60006103c886828701610318565b93505060206103d986828701610356565b92505060406103ea8682870161038c565b9150509250925092565b612cb4806104036000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806375b238fc1161010f578063b30906d4116100a2578063d82169db11610071578063d82169db146105a7578063e278fe6f146105c3578063e2f273bd146105cd578063e9fee16f146105e9576101e5565b8063b30906d4146104f9578063bae78d7b1461052a578063c1e3bd3e1461055b578063d547741f1461058b576101e5565b80639c822575116100de5780639c822575146104715780639cbe5efd146104a1578063a217fddf146104bf578063a81e3272146104dd576101e5565b806375b238fc146103d25780638c65c81f146103f057806391d1485414610423578063992ff43614610453576101e5565b806336568abe116101875780635b0a8bf4116101565780635b0a8bf4146103605780635e1e10041461037c578063633423be146103985780636a326ab1146103b6576101e5565b806336568abe146102ee5780633a4f69991461030a5780634db5b8561461032857806351cff8d914610344576101e5565b806315981650116101c35780631598165014610268578063248a9ca3146102845780632f2ff15d146102b45780633013ce29146102d0576101e5565b806301ffc9a7146101ea57806309432a9d1461021a5780631209b1f61461024a575b600080fd5b61020460048036038101906101ff919061201a565b610605565b6040516102119190612062565b60405180910390f35b610234600480360381019061022f91906120b3565b61067f565b6040516102419190612102565b60405180910390f35b6102526106dd565b60405161025f9190612102565b60405180910390f35b610282600480360381019061027d919061211d565b6106e3565b005b61029e60048036038101906102999190612180565b610756565b6040516102ab91906121bc565b60405180910390f35b6102ce60048036038101906102c99190612235565b610775565b005b6102d8610797565b6040516102e59190612284565b60405180910390f35b61030860048036038101906103039190612235565b6107bd565b005b610312610838565b60405161031f91906122be565b60405180910390f35b610342600480360381019061033d9190612305565b61084e565b005b61035e60048036038101906103599190612332565b6108db565b005b61037a60048036038101906103759190612305565b610a45565b005b6103966004803603810190610391919061239d565b610db6565b005b6103a0610e63565b6040516103ad91906123d9565b60405180910390f35b6103d060048036038101906103cb9190612332565b610e89565b005b6103da610f36565b6040516103e791906121bc565b60405180910390f35b61040a6004803603810190610405919061211d565b610f5a565b60405161041a94939291906123f4565b60405180910390f35b61043d60048036038101906104389190612235565b610fb4565b60405161044a9190612062565b60405180910390f35b61045b61101e565b60405161046891906122be565b60405180910390f35b61048b6004803603810190610486919061211d565b611034565b60405161049891906124f7565b60405180910390f35b6104a96110ce565b6040516104b69190612102565b60405180910390f35b6104c76110d4565b6040516104d491906121bc565b60405180910390f35b6104f760048036038101906104f29190612305565b6110db565b005b610513600480360381019061050e919061211d565b6115e0565b604051610521929190612519565b60405180910390f35b610544600480360381019061053f919061211d565b611640565b604051610552929190612519565b60405180910390f35b6105756004803603810190610570919061211d565b6116f0565b6040516105829190612600565b60405180910390f35b6105a560048036038101906105a09190612235565b611791565b005b6105c160048036038101906105bc919061265b565b6117b3565b005b6105cb611843565b005b6105e760048036038101906105e29190612332565b611947565b005b61060360048036038101906105fe919061211d565b611a07565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610678575061067782611cb4565b5b9050919050565b60006007600084815260200190815260200160002060020182815481106106a9576106a8612688565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff16905092915050565b60025481565b61070d7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b61074c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107439061273a565b60405180910390fd5b8060028190555050565b6000806000838152602001908152602001600020600101549050919050565b61077e82610756565b61078781611d1e565b6107918383611d32565b50505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6107c5611e23565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610829576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108338282611e2b565b505050565b600460149054906101000a900463ffffffff1681565b6108787fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b6108b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ae9061273a565b60405180910390fd5b80600460146101000a81548163ffffffff021916908363ffffffff16021790555050565b6109057fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b610944576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093b9061273a565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161097f9190612284565b602060405180830381865afa15801561099c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c0919061276f565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016109fd92919061279c565b6020604051808303816000875af1158015610a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4091906127f1565b505050565b610a6f7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b610aae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa59061273a565b60405180910390fd5b600460149054906101000a900463ffffffff1663ffffffff168163ffffffff161115610b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b069061286a565b60405180910390fd5b60076000600554815260200190815260200160002060030160009054906101000a900460ff16610b74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6b906128d6565b60405180910390fd5b60006007600060055481526020019081526020016000209050818160030160016101000a81548163ffffffff021916908363ffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168160010160008463ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158160030160056101000a81548160ff02191690831515021790555060008160010160008463ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160030160059054906101000a900460ff1615610d5d576000600460189054906101000a900463ffffffff1663ffffffff16600254610cb69190612925565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3384846040518463ffffffff1660e01b8152600401610d1793929190612967565b6020604051808303816000875af1158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a91906127f1565b50505b6005547f39edae8cf7c8946beb15c232789a9498e37501196a8273cce9b4e7de88ca97158483604051610d9192919061299e565b60405180910390a260056000815480929190610dac906129c7565b9190505550505050565b610de07fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b610e1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e169061273a565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610eb37fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b610ef2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee99061273a565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60076020528060005260406000206000915090508060000154908060030160009054906101000a900460ff16908060030160019054906101000a900463ffffffff16908060030160059054906101000a900460ff16905084565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600460189054906101000a900463ffffffff1681565b6060600760008381526020019081526020016000206002018054806020026020016040519081016040528092919081815260200182805480156110c257602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116110855790505b50505050509050919050565b60055481565b6000801b81565b6005546007600082815260200190815260200160002060030160009054906101000a900460ff1615611142576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113990612a5b565b60405180910390fd5b61114a611f1d565b600460149054906101000a900463ffffffff1663ffffffff168263ffffffff1611156111ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a290612ac7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660076000600554815260200190815260200160002060010160008463ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126090612b33565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546040518463ffffffff1660e01b81526004016112ec93929190612bb2565b6020604051808303816000875af115801561130b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132f91906127f1565b503360076000600554815260200190815260200160002060010160008463ffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506007600060055481526020019081526020016000206002018290806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff160217905550600860006005548152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555050503373ffffffffffffffffffffffffffffffffffffffff166005547f2b9c236bac90506cd604ab8eacd081c02d90699e1e7e8fee1c8156f0ff3cb5a78460405161158991906122be565b60405180910390a3600460189054906101000a900463ffffffff1663ffffffff1660076000600554815260200190815260200160002060020180549050106115d4576115d3611843565b5b6115dc611f63565b5050565b600681815481106115f057600080fd5b906000526020600020016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900463ffffffff16905082565b600080600680549050831061168a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168190612c35565b60405180910390fd5b6000600684815481106116a05761169f612688565b5b9060005260206000200190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160149054906101000a900463ffffffff169250925050915091565b60606008600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561178557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161173b575b50505050509050919050565b61179a82610756565b6117a381611d1e565b6117ad8383611e2b565b50505050565b6117dd7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b61181c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118139061273a565b60405180910390fd5b8060ff16600460186101000a81548163ffffffff021916908363ffffffff16021790555050565b61186d7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b6118ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a39061273a565b60405180910390fd5b6005546007600082815260200190815260200160002060030160009054906101000a900460ff1615611913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190a90612a5b565b60405180910390fd5b600160076000600554815260200190815260200160002060030160006101000a81548160ff02191690831515021790555050565b6119717fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b6119b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a79061273a565b60405180910390fd5b6119da7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582610775565b611a047fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611791565b50565b611a317fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b611a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a679061273a565b60405180910390fd5b806007600082815260200190815260200160002060030160009054906101000a900460ff1615611ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acc90612a5b565b60405180910390fd5b611add611f1d565b600060076000848152602001908152602001600020905060005b8160020180549050811015611c89576000826001016000846002018481548110611b2457611b23612688565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006002549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3384846040518463ffffffff1660e01b8152600401611be793929190612967565b6020604051808303816000875af1158015611c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2a91906127f1565b508173ffffffffffffffffffffffffffffffffffffffff16867f7a482fdeb6bc9a1376f597068a214a7a39472bb2eff1b8cad21ba04f49ddca1b83604051611c729190612102565b60405180910390a350508080600101915050611af7565b5060018160030160006101000a81548160ff02191690831515021790555050611cb0611f63565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611d2f81611d2a611e23565b611f6c565b50565b6000611d3e8383610fb4565b611e1857600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611db5611e23565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050611e1d565b600090505b92915050565b600033905090565b6000611e378383610fb4565b15611f1257600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611eaf611e23565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611f17565b600090505b92915050565b600260015403611f59576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b611f768282610fb4565b611fb95780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401611fb0929190612c55565b60405180910390fd5b5050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ff781611fc2565b811461200257600080fd5b50565b60008135905061201481611fee565b92915050565b6000602082840312156120305761202f611fbd565b5b600061203e84828501612005565b91505092915050565b60008115159050919050565b61205c81612047565b82525050565b60006020820190506120776000830184612053565b92915050565b6000819050919050565b6120908161207d565b811461209b57600080fd5b50565b6000813590506120ad81612087565b92915050565b600080604083850312156120ca576120c9611fbd565b5b60006120d88582860161209e565b92505060206120e98582860161209e565b9150509250929050565b6120fc8161207d565b82525050565b600060208201905061211760008301846120f3565b92915050565b60006020828403121561213357612132611fbd565b5b60006121418482850161209e565b91505092915050565b6000819050919050565b61215d8161214a565b811461216857600080fd5b50565b60008135905061217a81612154565b92915050565b60006020828403121561219657612195611fbd565b5b60006121a48482850161216b565b91505092915050565b6121b68161214a565b82525050565b60006020820190506121d160008301846121ad565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612202826121d7565b9050919050565b612212816121f7565b811461221d57600080fd5b50565b60008135905061222f81612209565b92915050565b6000806040838503121561224c5761224b611fbd565b5b600061225a8582860161216b565b925050602061226b85828601612220565b9150509250929050565b61227e816121f7565b82525050565b60006020820190506122996000830184612275565b92915050565b600063ffffffff82169050919050565b6122b88161229f565b82525050565b60006020820190506122d360008301846122af565b92915050565b6122e28161229f565b81146122ed57600080fd5b50565b6000813590506122ff816122d9565b92915050565b60006020828403121561231b5761231a611fbd565b5b6000612329848285016122f0565b91505092915050565b60006020828403121561234857612347611fbd565b5b600061235684828501612220565b91505092915050565b600061236a826121d7565b9050919050565b61237a8161235f565b811461238557600080fd5b50565b60008135905061239781612371565b92915050565b6000602082840312156123b3576123b2611fbd565b5b60006123c184828501612388565b91505092915050565b6123d38161235f565b82525050565b60006020820190506123ee60008301846123ca565b92915050565b600060808201905061240960008301876120f3565b6124166020830186612053565b61242360408301856122af565b6124306060830184612053565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61246e8161229f565b82525050565b60006124808383612465565b60208301905092915050565b6000602082019050919050565b60006124a482612439565b6124ae8185612444565b93506124b983612455565b8060005b838110156124ea5781516124d18882612474565b97506124dc8361248c565b9250506001810190506124bd565b5085935050505092915050565b600060208201905081810360008301526125118184612499565b905092915050565b600060408201905061252e6000830185612275565b61253b60208301846122af565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612577816121f7565b82525050565b6000612589838361256e565b60208301905092915050565b6000602082019050919050565b60006125ad82612542565b6125b7818561254d565b93506125c28361255e565b8060005b838110156125f35781516125da888261257d565b97506125e583612595565b9250506001810190506125c6565b5085935050505092915050565b6000602082019050818103600083015261261a81846125a2565b905092915050565b600060ff82169050919050565b61263881612622565b811461264357600080fd5b50565b6000813590506126558161262f565b92915050565b60006020828403121561267157612670611fbd565b5b600061267f84828501612646565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4f6e6c792061646d696e2063616e20706572666f726d2074686973206163746960008201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b60006127246022836126b7565b915061272f826126c8565b604082019050919050565b6000602082019050818103600083015261275381612717565b9050919050565b60008151905061276981612087565b92915050565b60006020828403121561278557612784611fbd565b5b60006127938482850161275a565b91505092915050565b60006040820190506127b16000830185612275565b6127be60208301846120f3565b9392505050565b6127ce81612047565b81146127d957600080fd5b50565b6000815190506127eb816127c5565b92915050565b60006020828403121561280757612806611fbd565b5b6000612815848285016127dc565b91505092915050565b7f496e76616c69642077696e6e696e67206e756d62657200000000000000000000600082015250565b60006128546016836126b7565b915061285f8261281e565b602082019050919050565b6000602082019050818103600083015261288381612847565b9050919050565b7f526f756e64206973206e6f7420636c6f73656400000000000000000000000000600082015250565b60006128c06013836126b7565b91506128cb8261288a565b602082019050919050565b600060208201905081810360008301526128ef816128b3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129308261207d565b915061293b8361207d565b92508282026129498161207d565b915082820484148315176129605761295f6128f6565b5b5092915050565b600060608201905061297c6000830186612275565b6129896020830185612275565b61299660408301846120f3565b949350505050565b60006040820190506129b360008301856122af565b6129c06020830184612275565b9392505050565b60006129d28261207d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a0457612a036128f6565b5b600182019050919050565b7f526f756e6420697320636c6f7365640000000000000000000000000000000000600082015250565b6000612a45600f836126b7565b9150612a5082612a0f565b602082019050919050565b60006020820190508181036000830152612a7481612a38565b9050919050565b7f4e756d6265722065786365656473206d6178206c696d69740000000000000000600082015250565b6000612ab16018836126b7565b9150612abc82612a7b565b602082019050919050565b60006020820190508181036000830152612ae081612aa4565b9050919050565b7f4e756d62657220616c72656164792074616b656e000000000000000000000000600082015250565b6000612b1d6014836126b7565b9150612b2882612ae7565b602082019050919050565b60006020820190508181036000830152612b4c81612b10565b9050919050565b6000819050919050565b6000612b78612b73612b6e846121d7565b612b53565b6121d7565b9050919050565b6000612b8a82612b5d565b9050919050565b6000612b9c82612b7f565b9050919050565b612bac81612b91565b82525050565b6000606082019050612bc76000830186612275565b612bd46020830185612ba3565b612be160408301846120f3565b949350505050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b6000612c1f6013836126b7565b9150612c2a82612be9565b602082019050919050565b60006020820190508181036000830152612c4e81612c12565b9050919050565b6000604082019050612c6a6000830185612275565b612c7760208301846121ad565b939250505056fea264697066735822122081df6c4d1b05c1e892605aca18ec15c347c622a01ab67deee4c6c4032c78022a64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c806375b238fc1161010f578063b30906d4116100a2578063d82169db11610071578063d82169db146105a7578063e278fe6f146105c3578063e2f273bd146105cd578063e9fee16f146105e9576101e5565b8063b30906d4146104f9578063bae78d7b1461052a578063c1e3bd3e1461055b578063d547741f1461058b576101e5565b80639c822575116100de5780639c822575146104715780639cbe5efd146104a1578063a217fddf146104bf578063a81e3272146104dd576101e5565b806375b238fc146103d25780638c65c81f146103f057806391d1485414610423578063992ff43614610453576101e5565b806336568abe116101875780635b0a8bf4116101565780635b0a8bf4146103605780635e1e10041461037c578063633423be146103985780636a326ab1146103b6576101e5565b806336568abe146102ee5780633a4f69991461030a5780634db5b8561461032857806351cff8d914610344576101e5565b806315981650116101c35780631598165014610268578063248a9ca3146102845780632f2ff15d146102b45780633013ce29146102d0576101e5565b806301ffc9a7146101ea57806309432a9d1461021a5780631209b1f61461024a575b600080fd5b61020460048036038101906101ff919061201a565b610605565b6040516102119190612062565b60405180910390f35b610234600480360381019061022f91906120b3565b61067f565b6040516102419190612102565b60405180910390f35b6102526106dd565b60405161025f9190612102565b60405180910390f35b610282600480360381019061027d919061211d565b6106e3565b005b61029e60048036038101906102999190612180565b610756565b6040516102ab91906121bc565b60405180910390f35b6102ce60048036038101906102c99190612235565b610775565b005b6102d8610797565b6040516102e59190612284565b60405180910390f35b61030860048036038101906103039190612235565b6107bd565b005b610312610838565b60405161031f91906122be565b60405180910390f35b610342600480360381019061033d9190612305565b61084e565b005b61035e60048036038101906103599190612332565b6108db565b005b61037a60048036038101906103759190612305565b610a45565b005b6103966004803603810190610391919061239d565b610db6565b005b6103a0610e63565b6040516103ad91906123d9565b60405180910390f35b6103d060048036038101906103cb9190612332565b610e89565b005b6103da610f36565b6040516103e791906121bc565b60405180910390f35b61040a6004803603810190610405919061211d565b610f5a565b60405161041a94939291906123f4565b60405180910390f35b61043d60048036038101906104389190612235565b610fb4565b60405161044a9190612062565b60405180910390f35b61045b61101e565b60405161046891906122be565b60405180910390f35b61048b6004803603810190610486919061211d565b611034565b60405161049891906124f7565b60405180910390f35b6104a96110ce565b6040516104b69190612102565b60405180910390f35b6104c76110d4565b6040516104d491906121bc565b60405180910390f35b6104f760048036038101906104f29190612305565b6110db565b005b610513600480360381019061050e919061211d565b6115e0565b604051610521929190612519565b60405180910390f35b610544600480360381019061053f919061211d565b611640565b604051610552929190612519565b60405180910390f35b6105756004803603810190610570919061211d565b6116f0565b6040516105829190612600565b60405180910390f35b6105a560048036038101906105a09190612235565b611791565b005b6105c160048036038101906105bc919061265b565b6117b3565b005b6105cb611843565b005b6105e760048036038101906105e29190612332565b611947565b005b61060360048036038101906105fe919061211d565b611a07565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610678575061067782611cb4565b5b9050919050565b60006007600084815260200190815260200160002060020182815481106106a9576106a8612688565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff16905092915050565b60025481565b61070d7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b61074c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107439061273a565b60405180910390fd5b8060028190555050565b6000806000838152602001908152602001600020600101549050919050565b61077e82610756565b61078781611d1e565b6107918383611d32565b50505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6107c5611e23565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610829576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108338282611e2b565b505050565b600460149054906101000a900463ffffffff1681565b6108787fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b6108b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ae9061273a565b60405180910390fd5b80600460146101000a81548163ffffffff021916908363ffffffff16021790555050565b6109057fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b610944576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093b9061273a565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161097f9190612284565b602060405180830381865afa15801561099c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c0919061276f565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016109fd92919061279c565b6020604051808303816000875af1158015610a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4091906127f1565b505050565b610a6f7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b610aae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa59061273a565b60405180910390fd5b600460149054906101000a900463ffffffff1663ffffffff168163ffffffff161115610b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b069061286a565b60405180910390fd5b60076000600554815260200190815260200160002060030160009054906101000a900460ff16610b74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6b906128d6565b60405180910390fd5b60006007600060055481526020019081526020016000209050818160030160016101000a81548163ffffffff021916908363ffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168160010160008463ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158160030160056101000a81548160ff02191690831515021790555060008160010160008463ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160030160059054906101000a900460ff1615610d5d576000600460189054906101000a900463ffffffff1663ffffffff16600254610cb69190612925565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3384846040518463ffffffff1660e01b8152600401610d1793929190612967565b6020604051808303816000875af1158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a91906127f1565b50505b6005547f39edae8cf7c8946beb15c232789a9498e37501196a8273cce9b4e7de88ca97158483604051610d9192919061299e565b60405180910390a260056000815480929190610dac906129c7565b9190505550505050565b610de07fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b610e1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e169061273a565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610eb37fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b610ef2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee99061273a565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60076020528060005260406000206000915090508060000154908060030160009054906101000a900460ff16908060030160019054906101000a900463ffffffff16908060030160059054906101000a900460ff16905084565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600460189054906101000a900463ffffffff1681565b6060600760008381526020019081526020016000206002018054806020026020016040519081016040528092919081815260200182805480156110c257602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116110855790505b50505050509050919050565b60055481565b6000801b81565b6005546007600082815260200190815260200160002060030160009054906101000a900460ff1615611142576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113990612a5b565b60405180910390fd5b61114a611f1d565b600460149054906101000a900463ffffffff1663ffffffff168263ffffffff1611156111ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a290612ac7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660076000600554815260200190815260200160002060010160008463ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126090612b33565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546040518463ffffffff1660e01b81526004016112ec93929190612bb2565b6020604051808303816000875af115801561130b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132f91906127f1565b503360076000600554815260200190815260200160002060010160008463ffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506007600060055481526020019081526020016000206002018290806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff160217905550600860006005548152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555050503373ffffffffffffffffffffffffffffffffffffffff166005547f2b9c236bac90506cd604ab8eacd081c02d90699e1e7e8fee1c8156f0ff3cb5a78460405161158991906122be565b60405180910390a3600460189054906101000a900463ffffffff1663ffffffff1660076000600554815260200190815260200160002060020180549050106115d4576115d3611843565b5b6115dc611f63565b5050565b600681815481106115f057600080fd5b906000526020600020016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900463ffffffff16905082565b600080600680549050831061168a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168190612c35565b60405180910390fd5b6000600684815481106116a05761169f612688565b5b9060005260206000200190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160149054906101000a900463ffffffff169250925050915091565b60606008600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561178557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161173b575b50505050509050919050565b61179a82610756565b6117a381611d1e565b6117ad8383611e2b565b50505050565b6117dd7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b61181c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118139061273a565b60405180910390fd5b8060ff16600460186101000a81548163ffffffff021916908363ffffffff16021790555050565b61186d7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b6118ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a39061273a565b60405180910390fd5b6005546007600082815260200190815260200160002060030160009054906101000a900460ff1615611913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190a90612a5b565b60405180910390fd5b600160076000600554815260200190815260200160002060030160006101000a81548160ff02191690831515021790555050565b6119717fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b6119b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a79061273a565b60405180910390fd5b6119da7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582610775565b611a047fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533611791565b50565b611a317fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610fb4565b611a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a679061273a565b60405180910390fd5b806007600082815260200190815260200160002060030160009054906101000a900460ff1615611ad5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611acc90612a5b565b60405180910390fd5b611add611f1d565b600060076000848152602001908152602001600020905060005b8160020180549050811015611c89576000826001016000846002018481548110611b2457611b23612688565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006002549050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3384846040518463ffffffff1660e01b8152600401611be793929190612967565b6020604051808303816000875af1158015611c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2a91906127f1565b508173ffffffffffffffffffffffffffffffffffffffff16867f7a482fdeb6bc9a1376f597068a214a7a39472bb2eff1b8cad21ba04f49ddca1b83604051611c729190612102565b60405180910390a350508080600101915050611af7565b5060018160030160006101000a81548160ff02191690831515021790555050611cb0611f63565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611d2f81611d2a611e23565b611f6c565b50565b6000611d3e8383610fb4565b611e1857600160008085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611db5611e23565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050611e1d565b600090505b92915050565b600033905090565b6000611e378383610fb4565b15611f1257600080600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611eaf611e23565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611f17565b600090505b92915050565b600260015403611f59576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b611f768282610fb4565b611fb95780826040517fe2517d3f000000000000000000000000000000000000000000000000000000008152600401611fb0929190612c55565b60405180910390fd5b5050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ff781611fc2565b811461200257600080fd5b50565b60008135905061201481611fee565b92915050565b6000602082840312156120305761202f611fbd565b5b600061203e84828501612005565b91505092915050565b60008115159050919050565b61205c81612047565b82525050565b60006020820190506120776000830184612053565b92915050565b6000819050919050565b6120908161207d565b811461209b57600080fd5b50565b6000813590506120ad81612087565b92915050565b600080604083850312156120ca576120c9611fbd565b5b60006120d88582860161209e565b92505060206120e98582860161209e565b9150509250929050565b6120fc8161207d565b82525050565b600060208201905061211760008301846120f3565b92915050565b60006020828403121561213357612132611fbd565b5b60006121418482850161209e565b91505092915050565b6000819050919050565b61215d8161214a565b811461216857600080fd5b50565b60008135905061217a81612154565b92915050565b60006020828403121561219657612195611fbd565b5b60006121a48482850161216b565b91505092915050565b6121b68161214a565b82525050565b60006020820190506121d160008301846121ad565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612202826121d7565b9050919050565b612212816121f7565b811461221d57600080fd5b50565b60008135905061222f81612209565b92915050565b6000806040838503121561224c5761224b611fbd565b5b600061225a8582860161216b565b925050602061226b85828601612220565b9150509250929050565b61227e816121f7565b82525050565b60006020820190506122996000830184612275565b92915050565b600063ffffffff82169050919050565b6122b88161229f565b82525050565b60006020820190506122d360008301846122af565b92915050565b6122e28161229f565b81146122ed57600080fd5b50565b6000813590506122ff816122d9565b92915050565b60006020828403121561231b5761231a611fbd565b5b6000612329848285016122f0565b91505092915050565b60006020828403121561234857612347611fbd565b5b600061235684828501612220565b91505092915050565b600061236a826121d7565b9050919050565b61237a8161235f565b811461238557600080fd5b50565b60008135905061239781612371565b92915050565b6000602082840312156123b3576123b2611fbd565b5b60006123c184828501612388565b91505092915050565b6123d38161235f565b82525050565b60006020820190506123ee60008301846123ca565b92915050565b600060808201905061240960008301876120f3565b6124166020830186612053565b61242360408301856122af565b6124306060830184612053565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61246e8161229f565b82525050565b60006124808383612465565b60208301905092915050565b6000602082019050919050565b60006124a482612439565b6124ae8185612444565b93506124b983612455565b8060005b838110156124ea5781516124d18882612474565b97506124dc8361248c565b9250506001810190506124bd565b5085935050505092915050565b600060208201905081810360008301526125118184612499565b905092915050565b600060408201905061252e6000830185612275565b61253b60208301846122af565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612577816121f7565b82525050565b6000612589838361256e565b60208301905092915050565b6000602082019050919050565b60006125ad82612542565b6125b7818561254d565b93506125c28361255e565b8060005b838110156125f35781516125da888261257d565b97506125e583612595565b9250506001810190506125c6565b5085935050505092915050565b6000602082019050818103600083015261261a81846125a2565b905092915050565b600060ff82169050919050565b61263881612622565b811461264357600080fd5b50565b6000813590506126558161262f565b92915050565b60006020828403121561267157612670611fbd565b5b600061267f84828501612646565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4f6e6c792061646d696e2063616e20706572666f726d2074686973206163746960008201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b60006127246022836126b7565b915061272f826126c8565b604082019050919050565b6000602082019050818103600083015261275381612717565b9050919050565b60008151905061276981612087565b92915050565b60006020828403121561278557612784611fbd565b5b60006127938482850161275a565b91505092915050565b60006040820190506127b16000830185612275565b6127be60208301846120f3565b9392505050565b6127ce81612047565b81146127d957600080fd5b50565b6000815190506127eb816127c5565b92915050565b60006020828403121561280757612806611fbd565b5b6000612815848285016127dc565b91505092915050565b7f496e76616c69642077696e6e696e67206e756d62657200000000000000000000600082015250565b60006128546016836126b7565b915061285f8261281e565b602082019050919050565b6000602082019050818103600083015261288381612847565b9050919050565b7f526f756e64206973206e6f7420636c6f73656400000000000000000000000000600082015250565b60006128c06013836126b7565b91506128cb8261288a565b602082019050919050565b600060208201905081810360008301526128ef816128b3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129308261207d565b915061293b8361207d565b92508282026129498161207d565b915082820484148315176129605761295f6128f6565b5b5092915050565b600060608201905061297c6000830186612275565b6129896020830185612275565b61299660408301846120f3565b949350505050565b60006040820190506129b360008301856122af565b6129c06020830184612275565b9392505050565b60006129d28261207d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a0457612a036128f6565b5b600182019050919050565b7f526f756e6420697320636c6f7365640000000000000000000000000000000000600082015250565b6000612a45600f836126b7565b9150612a5082612a0f565b602082019050919050565b60006020820190508181036000830152612a7481612a38565b9050919050565b7f4e756d6265722065786365656473206d6178206c696d69740000000000000000600082015250565b6000612ab16018836126b7565b9150612abc82612a7b565b602082019050919050565b60006020820190508181036000830152612ae081612aa4565b9050919050565b7f4e756d62657220616c72656164792074616b656e000000000000000000000000600082015250565b6000612b1d6014836126b7565b9150612b2882612ae7565b602082019050919050565b60006020820190508181036000830152612b4c81612b10565b9050919050565b6000819050919050565b6000612b78612b73612b6e846121d7565b612b53565b6121d7565b9050919050565b6000612b8a82612b5d565b9050919050565b6000612b9c82612b7f565b9050919050565b612bac81612b91565b82525050565b6000606082019050612bc76000830186612275565b612bd46020830185612ba3565b612be160408301846120f3565b949350505050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b6000612c1f6013836126b7565b9150612c2a82612be9565b602082019050919050565b60006020820190508181036000830152612c4e81612c12565b9050919050565b6000604082019050612c6a6000830185612275565b612c7760208301846121ad565b939250505056fea264697066735822122081df6c4d1b05c1e892605aca18ec15c347c622a01ab67deee4c6c4032c78022a64736f6c634300081c0033",
  "devdoc": {
    "details": "This contract is used to create a lottery systemA contract for a lottery systemdefault numbers are 0-99 and max numbers per round are 100",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "LuckyLotDraw",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is used to create a lottery system",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3929,
        "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3924_storage)"
      },
      {
        "astId": 7379,
        "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 12192,
        "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
        "label": "ticketPrice",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 12194,
        "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
        "label": "paymentToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12196,
        "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
        "label": "paymentAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address_payable"
      },
      {
        "astId": 12199,
        "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
        "label": "maxNumber",
        "offset": 20,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 12202,
        "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
        "label": "maxNumbersPerRound",
        "offset": 24,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 12220,
        "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
        "label": "currentRoundId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 12229,
        "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
        "label": "entries",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(Entry)12225_storage)dyn_storage"
      },
      {
        "astId": 12234,
        "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
        "label": "rounds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Round)12218_storage)"
      },
      {
        "astId": 12239,
        "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
        "label": "roundParticipants",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Entry)12225_storage)dyn_storage": {
        "base": "t_struct(Entry)12225_storage",
        "encoding": "dynamic_array",
        "label": "struct LuckyLotDraw.Entry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3924_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3924_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Round)12218_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LuckyLotDraw.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)12218_storage"
      },
      "t_struct(Entry)12225_storage": {
        "encoding": "inplace",
        "label": "struct LuckyLotDraw.Entry",
        "members": [
          {
            "astId": 12222,
            "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
            "label": "participant",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12224,
            "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
            "label": "number",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)3924_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 3921,
            "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3923,
            "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Round)12218_storage": {
        "encoding": "inplace",
        "label": "struct LuckyLotDraw.Round",
        "members": [
          {
            "astId": 12204,
            "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12208,
            "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
            "label": "participants",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 12211,
            "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
            "label": "numbers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint32)dyn_storage"
          },
          {
            "astId": 12213,
            "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
            "label": "isClosed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 12215,
            "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
            "label": "winningNumber",
            "offset": 1,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 12217,
            "contract": "contracts/LuckyLotDraw.sol:LuckyLotDraw",
            "label": "hasWinner",
            "offset": 5,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}